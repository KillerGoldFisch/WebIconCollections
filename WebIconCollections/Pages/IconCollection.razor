@page "/IconCollection/{CollectionName}"
@using FuzzySharp


@if (Collections.IconCollections.ContainsKey(CollectionName)) {
    <h1>@CollectionName</h1>

    <div class="row justify-content-center">
        <div class="col-12 col-md-10 col-lg-8">
            <div class="card-body row no-gutters align-items-center">
                <div class="col-auto">
                    <i class="fas fa-search h4 text-body"></i>
                </div>
                <!--end of col-->
                <div class="col">
                    <input class="form-control form-control-lg form-control-borderless" type="search" placeholder="Search for keywords" @bind="SearchText">
                </div>
                <!--end of col-->
            </div>
        </div>
        <!--end of col-->
    </div>

    <div class="d-flex flex-wrap">
        @foreach (var iconName in GetIcons())
        {
            var link = $"IconDetails/{CollectionName}/{iconName}";
            <NavLink class="nav-link" href="@link">
            <div class="card" style="width: 10rem; margin: 0.5rem; padding: 0.2rem">
                <img class="card-img-top" src="/images/IconCollections/@(CollectionName)/@(iconName).svg" alt="Card image cap">
                <div class="card-body">
                    <p class="card-text text-monospace" style="font-size: 66.6%;">@iconName</p>
                </div>
            </div>
            </NavLink>
                }
        </div>

} else {
    <h1>Collection not found!</h1>
}

@code {

    [Parameter]
    public string CollectionName { get; set; }

    public string SearchText { get; set; }

    public IEnumerable<string> GetIcons()
    {
        if(!Collections.IconCollections.ContainsKey(CollectionName))
            return new string[] { };
        if (SearchText is null || SearchText.Length == 0)
            return Collections.IconCollections[CollectionName];
        return Process.ExtractSorted(SearchText, Collections.IconCollections[CollectionName], cutoff: 66).Select(x => x.Value);
    }

}
